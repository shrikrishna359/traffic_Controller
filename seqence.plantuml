@startuml "TrafficControl"

class TrafficLight{
- bool lightState
void SwitchOn()
void SwitchOff()
}

class TrafficPole{   
    - TrafficLight Red
    - TrafficLight Yellow
    - TrafficLight Green
    void Stop()
    void Go()
    void SlowDown()
}

class TrafficJunction{
    
    - int noOfPole
    TrafficJunction(int noOfPole) :mnoOfPole(noOfPole)
    {
        InitalizeTrafficPoles()
    }
    InitalizeTrafficPoles()
    {
        
        for()
        {
        std::unique_ptr<traffic pole> ptr_traffic_pole;
        vec.push_back(std::move(ptr_traffic_pole));

        }
    }
    void AllowTraffic(int poleNo)
    {
        if(poleno<0 && )
        {
            for()
            {
                if (index not equal to (selected poleno -1)
                {
                    vct_trafficpole[itr]->stop(); //turning off all pole
                }
            }
            vct_trafficpole[poleNo-1]->start();
        }
    }
    void DisableTraffic(int poleNo)
    void EnableSlowDown()
    
    private:
    vector< trafficpoles*> vct_trafficpole;


   
}

class TrafficControl{
    - TrafficJunction obj_TrafficJunction

    enum Mode{
       Invalid,
       Auto,
       Manual,
       Night 
    }
    void TrafficHandler()
    void AllowTraffic(int poleNo)
    void SetMode(enum Mode)
}
class MessageQueue{
    MessageQueue(){
        create msgqueue
    }

}
class userinputmessagequeue{
    void sendmsg()
    void recvmsg()
}
class userinput{
    void Start()
}

userinput "1" --* "1" userinputmessagequeue
userinputmessagequeue "1" --* "1" TrafficJunction
TrafficJunction "1" --* "1" TrafficPole
TrafficPole "1" --* "1" TrafficLight

@enduml


